using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

/// <summary>
/// MainMenu.cs
/// Ava Alexandra Taylor
/// Created     :   28/11/2018
/// Edited      :   28/11/2018
/// </summary>
/// 


[RequireComponent(typeof(AudioSource))]                     //Add audio source when attaching script

public class MainMenu : MonoBehaviour {

    public int _selectedButton = 0;                         //defines selected gui button


    public float _timeBetweenButtonPress = 0.1f;            //Defines delay time between button presses
    public float _timeDelay;                                //defines delay variable value

    public float _mainMenuVerticalInputTimer;               //defines main menu vertical input timer
    public float _mainMenuVerticalInputDelay = 1f;          //defines main menu vertical input delay

    public Texture2D _mainMenuBG;                           //creates slot in inspector to assign main menu background

    private AudioSource _mainMenuAudio;                     //defines naming convention for the main menu audio component
    public AudioClip _mainMenuMUSIC;                        //creates slot in inspector to assign main menu music
    public AudioClip _mainMenuButtonSFX;                    //creates slot in inspector to assign main menu button audio

    public float _mainMenuFadeVal;                          //defines fade value
    public float _mainMenuFadeMS = 0.15f;                   //defines fade speed

    public float _mainMenuButtonWidth = 100f;               //defines main menu button width
    public float _mainMenuButtonHeight = 25f;               //defines main menu button height
    public float _mainMenuGUIOffset = 10f;                  //defines main menu GUI offset

    private bool _onePlayerTrigger;                         //defines if one player has been activated
    private bool _twoPlayerTrigger;                         //defines if two player has been activated
    private bool _practiceModeTrigger;                      //defines if practice mode has been activated
    private bool _gameSettings;                             //defines if game settings have been activated
    private bool _gameQuit;                                 //defines if game is exiting

    private bool _ps4Cont;                                  //creates bool for ps4 controller when connected
    private bool _xBOXCont;                                 //creates bool for XBOX controller when connected
    private bool _keyboardCont;                             //creates bool for keyboard controls when connected

    private string[] _mainMenuButtons = new string[]        //create array of gui buttons for main menu
    {

        "_onePlayer",
        "_twoPlayer",
        "_practiceMode",
        "_settings",
        "_exit"

    };

    private MainMenuController _mainMenuCont;               //defines name convention for main menu controller

    private enum MainMenuCont                               //defines states of main menu
    {

        MainMenuFadeIn = 0,
        MainMenuIdle = 1,
        MainMenuFadeOut = 2

    }

	// Use this for initialization
	void Start () {

        _onePlayerTrigger = false;                          //game states are false on startup
        _twoPlayerTrigger = false;                          //game states are false on startup
        _practiceModeTrigger = false;                       //game states are false on startup
        _gameSettings = false;                              //game states are false on startup
        _gameQuit = false;                                  //game states are false on startup

        _ps4Cont = false;                                   //ps4 controller is false on start runtime
        _xBOXCont = false;                                  //xbox controller is false on start runtime

        _mainMenuFadeVal = 0;                               //fade value = 0 on startup

        _mainMenuAudio = getComponent<AudioSource>();       //main menu audio = audio source component

        _mainMenuAudio.volume = 0;                          //Audio volume = 0 on startup
        _mainMenuAudio.clip = _mainMenuMUSIC;               //Audio clip = main menu music
        _mainMenuAudio.loop = true;                         //audio loops
        _mainMenuAudio.Play();                              //play audio

        _mainMenuCont = 
            MainMenu.MainMenuCont.MainMenuFadeIn;           //state = fade in(initial state)

        StartCoroutine("MainMenuManager");                  //main menu manager on startup

	}
	
	// Update is called once per frame
	void Update () {

        string[] _joyStickNames = 
           Input.GetJoyStickNames();                        //joystick names = joystick names from input

        for(int _js = 0;                                    //integer _js = 0
            _js < _joyStickNames.Length;                    //for _js < length of joystick array
            _js++)                                          //increment _js by 1    
        {

            if(_joyStickNames[_js].Length == 0)             //if joystick names = 0
            {

                _keyboardCont = true;                       //keyboard controls are active                                

            }

            if(_joyStickNames[_js].Length == 19)            //if joystick names corresponds to code 19
            {

                _ps4Cont = true;                            //ps4 controller is active


            }

            if (_joyStickNames[_js].Length == 33)            //if joystick names corresponds to code 33
            {

                _xBOXCont = true;                            //xbox controller is active


            }



        }





	}

    private IEnumerator MainMenuManager()
    {

        while (true)
        {

            switch (_mainMenuCont)
            {

                case MainMenuCont.MainMenuFadeIn:
                    MainMenuFadeIn();
                    break;

                case MainMenuCont.MainMenuIdle:
                    MainMenuIdle();
                    break;

                case MainMenuCont.MainMenuFadeOut:
                    MainMenuFadeOut();
                    break;

            }

            yield return null;

        }

    }

    private void MainMenuFadeIn()
    {
        Debug.log("MainMenuFadeIn");

        _mainMenuAudio.volume += 
            _mainMenuFadeMS * Time.deltaTime;               //increase audio volume by fade speed

        _mainMenuFadeVal += 
            _mainMenuFadeMS * Time.deltaTime;               //increase fade value by fade speed

        if (_mainMenuFadeVal > 1)
        {

            _mainMenuFadeVal = 1;                           //if fade value > 1, fade value = 1

        }

        if(_mainMenuFadeVal == 1)                           //if fade val = 1
        {

            _mainMenuCont = 
                MainMenu.MainMenuCont.MainMenuIdle;         //make state idle

        }

    }

    private void MainMenuIdle()
    {

        Debug.log("MainMenuFadeIdle");

        if (_onePlayerTrigger || _gameQuit == true)         //if starting 1p or game is quitting 
        {

            _mainMenuCont = 
                MainMenu.MainMenuCont.MainMenuFadeOut;      //fade main menu out

        }

    }

    private void MainMenuFadeOut()
    {

        Debug.log("MainMenuFadeOut");
        _mainMenuAudio.volume -=
            _mainMenuFadeMS * Time.deltaTime;               //decrease audio volume by fade speed

        _mainMenuFadeVal -=
            _mainMenuFadeMS * Time.deltaTime;               //decrease fade value by fade speed

        if (_mainMenuFadeVal < 0)
        {

            _mainMenuFadeVal = 0;                           //if fade value < 0, fade value = 0

        }

        if(_mainMenuFadeVal == 0 && 
            _onePlayerTrigger == true)                      //if fade value = 0 and one player is starting
        {

            SceneManager.LoadScene("Character Select");                       //load character select

        }

    }

    private void MainMenuButtonPress()
    {

        Debug.log("MainMenuButtonPress");
        GUI.FocusControl(_mainMenuButtons[_selectedButton]);

        switch (_selectedButton)
        {

            case 0:
                _mainMenuAudio.PlayOneShot(
                    _mainMenuButtonSFX);                    //play button audio
                _onePlayerTrigger = true;                   //set starting one player = true
                break;
            case 1:
                _mainMenuAudio.PlayOneShot(
                    _mainMenuButtonSFX);                    //play button audio
                _twoPlayerTrigger = true;                   //set starting two player = true
                break;
            case 2:
                _mainMenuAudio.PlayOneShot(
                    _mainMenuButtonSFX);                    //play button audio
                _practiceModeTrigger = true;                //set starting practice mode = true
                break;
            case 3:
                _mainMenuAudio.PlayOneShot(
                    _mainMenuButtonSFX);                   //play button audio
                _gameSettings = true;                       //set starting settings = true
                break;
            case 4:
                _mainMenuAudio.PlayOneShot(
                    _mainMenuButtonSFX);                    //play button audio
                _gameQuit = true;                           //set starting quit = true
                break;


        }

    }

    void OnGUI()
    {

        GUI.DrawTexture(new Rect(                           //draw texture
            0, 0,                                           //at this pos
            Screen.width, Screen.height),                   //by these dimensions
            _mainMenuBG);                                   //drawing this

    }



}
